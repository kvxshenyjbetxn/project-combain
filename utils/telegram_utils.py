# utils/telegram_utils.py

import logging
import tkinter as tk
from tkinter import messagebox

logger = logging.getLogger(__name__)

def send_telegram_error_notification(app_instance, task_name, lang_code, step, error_details):
    """–ù–µ–≥–∞–π–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É."""
    message = (
        f"‚ùå *–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è\\!* ‚ùå\n\n"
        f"*–ó–∞–≤–¥–∞–Ω–Ω—è:* {app_instance._escape_markdown(task_name)}\n"
        f"*–ú–æ–≤–∞:* {app_instance._escape_markdown(lang_code.upper())}\n"
        f"*–ï—Ç–∞–ø:* {app_instance._escape_markdown(step)}\n"
        f"*–ü–æ–º–∏–ª–∫–∞:* {app_instance._escape_markdown(error_details)}"
    )
    app_instance.tg_api.send_message_in_thread(message)

def send_task_completion_report(app_instance, task_config, single_lang_code=None):
    """–§–æ—Ä–º—É—î —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—é –≤—Å—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è –∞–±–æ –æ–¥–Ω—ñ—î—ó –º–æ–≤–∏."""
    task_name = app_instance._escape_markdown(task_config.get('task_name', '–ù–µ–≤—ñ–¥–æ–º–µ –∑–∞–≤–¥–∞–Ω–Ω—è'))
    
    langs_to_report = [single_lang_code] if single_lang_code else task_config['selected_langs']
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
    if single_lang_code:
        escaped_lang_code = app_instance._escape_markdown(single_lang_code.upper())
        report_lines = [f"‚úÖ *–ó–∞–≤–¥–∞–Ω–Ω—è \"{task_name}\" –¥–ª—è –º–æ–≤–∏ {escaped_lang_code} –∑–∞–≤–µ—Ä—à–µ–Ω–æ\\!* ‚úÖ\n"]
    else:
        report_lines = [f"‚úÖ *–ó–∞–≤–¥–∞–Ω–Ω—è \"{task_name}\" –ø–æ–≤–Ω—ñ—Å—Ç—é –∑–∞–≤–µ—Ä—à–µ–Ω–æ\\!* ‚úÖ\n"]

    task_key_prefix = f"{task_config['task_index']}_"

    for lang_code in langs_to_report:
        task_key = task_key_prefix + lang_code
        status = app_instance.task_completion_status.get(task_key)
        if not status: continue

        report_lines.append(app_instance._escape_markdown(f"---"))
        lang_flags = {"it": "üáÆüáπ", "ro": "üá∑üá¥", "ua": "üá∫üá¶", "en": "üá¨üáß", "pl": "üáµüá±", "de": "üá©üá™", "fr": "üá´üá∑", "es": "üá™üá∏"}
        flag = lang_flags.get(lang_code.lower(), "")
        escaped_lang_code = app_instance._escape_markdown(lang_code.upper())
        report_lines.append(f"{flag} *–ú–æ–≤–∞: {escaped_lang_code}*")
        report_lines.append(app_instance._escape_markdown(f"---"))

        # –ü—Ä–æ—Ö–æ–¥–∏–º–æ –ø–æ –∫–ª—é—á–∞—Ö —Ç–∞ –∑–Ω–∞—á–µ–Ω–Ω—è—Ö –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        for step_name, result_icon in status['steps'].items():
            escaped_step_name = app_instance._escape_markdown(step_name)
            
            # –°–ø–µ—Ü—ñ–∞–ª—å–Ω–∞ –ª–æ–≥—ñ–∫–∞ –¥–ª—è –∫—Ä–æ–∫—É –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–æ–±—Ä–∞–∂–µ–Ω—å
            if step_name == app_instance._t('step_name_gen_images'):
                images_generated = status.get("images_generated", 0)
                total_images = status.get("total_images", 0)
                count_text = app_instance._escape_markdown(f"({images_generated}/{total_images} —à—Ç.)")
                
                # –í–∏–∑–Ω–∞—á–∞—î–º–æ —ñ–∫–æ–Ω–∫—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ —Ä–µ–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö, –∞ –Ω–µ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ—ó
                current_icon = result_icon
                if total_images > 0: # –Ø–∫—â–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–ª–∞–Ω—É–≤–∞–ª–∏—Å—å
                    if images_generated == total_images:
                        current_icon = "‚úÖ"
                    elif images_generated > 0:
                        current_icon = "‚ö†Ô∏è" # –ß–∞—Å—Ç–∫–æ–≤–æ –≤–∏–∫–æ–Ω–∞–Ω–æ
                    else:
                        current_icon = "‚ùå"
                
                # –Ø–∫—â–æ –∫—Ä–æ–∫ –±—É–≤ –ø—Ä–æ–ø—É—â–µ–Ω–∏–π (total_images == 0), —ñ–∫–æ–Ω–∫–∞ –∑–∞–ª–∏—à–∏—Ç—å—Å—è "‚ö™Ô∏è"
                if current_icon == "‚ùå":
                    report_lines.append(f"‚Ä¢ {current_icon} ~{escaped_step_name}~ *{count_text}*")
                else:
                    report_lines.append(f"‚Ä¢ {current_icon} {escaped_step_name} *{count_text}*")
            
            elif result_icon == "‚ùå":
                report_lines.append(f"‚Ä¢ {result_icon} ~{escaped_step_name}~")
            elif result_icon == "‚ö™Ô∏è":
                 skipped_text = app_instance._escape_markdown("(–ø—Ä–æ–ø—É—â–µ–Ω–æ)")
                 report_lines.append(f"‚Ä¢ {result_icon} {escaped_step_name} *{skipped_text}*")
            else:
                report_lines.append(f"‚Ä¢ {result_icon} {escaped_step_name}")
    
    app_instance.tg_api.send_message_in_thread("\n".join(report_lines))

def test_telegram_connection(app_instance):
    """Test Telegram API connection and display results."""
    from api.telegram_api import TelegramAPI
    
    api_key = app_instance.tg_api_key_var.get()
    temp_config = {"telegram": {"api_key": api_key}}
    temp_api = TelegramAPI(temp_config)
    success, message = temp_api.test_connection()
    if success:
        messagebox.showinfo(app_instance._t('test_connection_title_tg'), message)
    else:
        messagebox.showerror(app_instance._t('test_connection_title_tg'), message)
